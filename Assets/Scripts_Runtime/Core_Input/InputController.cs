//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts_Runtime/Core_Input/InputController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputController: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputController"",
    ""maps"": [
        {
            ""name"": ""World"",
            ""id"": ""59fa9410-023c-4a83-97f3-d3360961d25c"",
            ""actions"": [
                {
                    ""name"": ""KB_MoveUp"",
                    ""type"": ""Value"",
                    ""id"": ""d819d41b-65df-45b7-9853-a28654570552"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""KB_MoveDown"",
                    ""type"": ""Value"",
                    ""id"": ""52bd6912-8fad-46dd-bdbd-2c66cdf2691f"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""KB_MoveLeft"",
                    ""type"": ""Value"",
                    ""id"": ""4e876747-7c95-4ac2-9b74-54888149c3cd"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""KB_MoveRight"",
                    ""type"": ""Value"",
                    ""id"": ""534f8e0a-3051-4100-8b07-119feeecb85c"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Mouse_Pos"",
                    ""type"": ""Value"",
                    ""id"": ""7e157f69-198a-4f41-a69f-8d9b236cda45"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseLeft"",
                    ""type"": ""Button"",
                    ""id"": ""c6053bcb-4e51-4514-b0e3-57711b1fa158"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseRight"",
                    ""type"": ""Button"",
                    ""id"": ""15ad3f56-bbc2-4b4c-bd9d-f99f61c622af"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7d024c32-91e9-467b-8a89-67f94976773c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KB_MoveUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1976d293-3652-4140-9552-255c44a910b9"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KB_MoveUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2bcb05db-c825-40f6-962a-45548d0fa8f9"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KB_MoveDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bbfae0ee-ea00-4415-906d-aa3db0b82662"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KB_MoveDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""54ce1ed2-3b24-4f89-a7e1-1b43f84dc456"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KB_MoveLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bdd385fa-e142-4653-a646-8196def2571c"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KB_MoveLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""def6600f-dd23-4869-b48f-6eaf5fb1a934"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KB_MoveRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6b70c4dc-1ee3-434b-8191-152996e5a94b"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KB_MoveRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e3a6029a-180e-4d6a-a357-0d1988207724"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse_Pos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2117ff3b-a9b3-4d86-a0b4-272b6736e1c8"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""075d0a7f-a4f9-46c2-b48c-5009d1124a4c"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""New action map1"",
            ""id"": ""4559257b-e446-4e03-bf83-fc8beeffe9ff"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""1449d2a7-b678-4c69-ae3f-1b1f0b9e30d8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""afd5586a-959a-4afe-bb52-93e8dfc70944"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""New action map"",
            ""id"": ""4620b138-f9e9-4821-bcc5-78cc53cec761"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""9e3ab02d-5990-4251-be1d-4906a4859e49"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""23bddb1c-ad53-4480-ba2d-e17c8aa275d9"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // World
        m_World = asset.FindActionMap("World", throwIfNotFound: true);
        m_World_KB_MoveUp = m_World.FindAction("KB_MoveUp", throwIfNotFound: true);
        m_World_KB_MoveDown = m_World.FindAction("KB_MoveDown", throwIfNotFound: true);
        m_World_KB_MoveLeft = m_World.FindAction("KB_MoveLeft", throwIfNotFound: true);
        m_World_KB_MoveRight = m_World.FindAction("KB_MoveRight", throwIfNotFound: true);
        m_World_Mouse_Pos = m_World.FindAction("Mouse_Pos", throwIfNotFound: true);
        m_World_MouseLeft = m_World.FindAction("MouseLeft", throwIfNotFound: true);
        m_World_MouseRight = m_World.FindAction("MouseRight", throwIfNotFound: true);
        // New action map1
        m_Newactionmap1 = asset.FindActionMap("New action map1", throwIfNotFound: true);
        m_Newactionmap1_Newaction = m_Newactionmap1.FindAction("New action", throwIfNotFound: true);
        // New action map
        m_Newactionmap = asset.FindActionMap("New action map", throwIfNotFound: true);
        m_Newactionmap_Newaction = m_Newactionmap.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // World
    private readonly InputActionMap m_World;
    private List<IWorldActions> m_WorldActionsCallbackInterfaces = new List<IWorldActions>();
    private readonly InputAction m_World_KB_MoveUp;
    private readonly InputAction m_World_KB_MoveDown;
    private readonly InputAction m_World_KB_MoveLeft;
    private readonly InputAction m_World_KB_MoveRight;
    private readonly InputAction m_World_Mouse_Pos;
    private readonly InputAction m_World_MouseLeft;
    private readonly InputAction m_World_MouseRight;
    public struct WorldActions
    {
        private @InputController m_Wrapper;
        public WorldActions(@InputController wrapper) { m_Wrapper = wrapper; }
        public InputAction @KB_MoveUp => m_Wrapper.m_World_KB_MoveUp;
        public InputAction @KB_MoveDown => m_Wrapper.m_World_KB_MoveDown;
        public InputAction @KB_MoveLeft => m_Wrapper.m_World_KB_MoveLeft;
        public InputAction @KB_MoveRight => m_Wrapper.m_World_KB_MoveRight;
        public InputAction @Mouse_Pos => m_Wrapper.m_World_Mouse_Pos;
        public InputAction @MouseLeft => m_Wrapper.m_World_MouseLeft;
        public InputAction @MouseRight => m_Wrapper.m_World_MouseRight;
        public InputActionMap Get() { return m_Wrapper.m_World; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WorldActions set) { return set.Get(); }
        public void AddCallbacks(IWorldActions instance)
        {
            if (instance == null || m_Wrapper.m_WorldActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_WorldActionsCallbackInterfaces.Add(instance);
            @KB_MoveUp.started += instance.OnKB_MoveUp;
            @KB_MoveUp.performed += instance.OnKB_MoveUp;
            @KB_MoveUp.canceled += instance.OnKB_MoveUp;
            @KB_MoveDown.started += instance.OnKB_MoveDown;
            @KB_MoveDown.performed += instance.OnKB_MoveDown;
            @KB_MoveDown.canceled += instance.OnKB_MoveDown;
            @KB_MoveLeft.started += instance.OnKB_MoveLeft;
            @KB_MoveLeft.performed += instance.OnKB_MoveLeft;
            @KB_MoveLeft.canceled += instance.OnKB_MoveLeft;
            @KB_MoveRight.started += instance.OnKB_MoveRight;
            @KB_MoveRight.performed += instance.OnKB_MoveRight;
            @KB_MoveRight.canceled += instance.OnKB_MoveRight;
            @Mouse_Pos.started += instance.OnMouse_Pos;
            @Mouse_Pos.performed += instance.OnMouse_Pos;
            @Mouse_Pos.canceled += instance.OnMouse_Pos;
            @MouseLeft.started += instance.OnMouseLeft;
            @MouseLeft.performed += instance.OnMouseLeft;
            @MouseLeft.canceled += instance.OnMouseLeft;
            @MouseRight.started += instance.OnMouseRight;
            @MouseRight.performed += instance.OnMouseRight;
            @MouseRight.canceled += instance.OnMouseRight;
        }

        private void UnregisterCallbacks(IWorldActions instance)
        {
            @KB_MoveUp.started -= instance.OnKB_MoveUp;
            @KB_MoveUp.performed -= instance.OnKB_MoveUp;
            @KB_MoveUp.canceled -= instance.OnKB_MoveUp;
            @KB_MoveDown.started -= instance.OnKB_MoveDown;
            @KB_MoveDown.performed -= instance.OnKB_MoveDown;
            @KB_MoveDown.canceled -= instance.OnKB_MoveDown;
            @KB_MoveLeft.started -= instance.OnKB_MoveLeft;
            @KB_MoveLeft.performed -= instance.OnKB_MoveLeft;
            @KB_MoveLeft.canceled -= instance.OnKB_MoveLeft;
            @KB_MoveRight.started -= instance.OnKB_MoveRight;
            @KB_MoveRight.performed -= instance.OnKB_MoveRight;
            @KB_MoveRight.canceled -= instance.OnKB_MoveRight;
            @Mouse_Pos.started -= instance.OnMouse_Pos;
            @Mouse_Pos.performed -= instance.OnMouse_Pos;
            @Mouse_Pos.canceled -= instance.OnMouse_Pos;
            @MouseLeft.started -= instance.OnMouseLeft;
            @MouseLeft.performed -= instance.OnMouseLeft;
            @MouseLeft.canceled -= instance.OnMouseLeft;
            @MouseRight.started -= instance.OnMouseRight;
            @MouseRight.performed -= instance.OnMouseRight;
            @MouseRight.canceled -= instance.OnMouseRight;
        }

        public void RemoveCallbacks(IWorldActions instance)
        {
            if (m_Wrapper.m_WorldActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IWorldActions instance)
        {
            foreach (var item in m_Wrapper.m_WorldActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_WorldActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public WorldActions @World => new WorldActions(this);

    // New action map1
    private readonly InputActionMap m_Newactionmap1;
    private List<INewactionmap1Actions> m_Newactionmap1ActionsCallbackInterfaces = new List<INewactionmap1Actions>();
    private readonly InputAction m_Newactionmap1_Newaction;
    public struct Newactionmap1Actions
    {
        private @InputController m_Wrapper;
        public Newactionmap1Actions(@InputController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_Newactionmap1_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_Newactionmap1; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Newactionmap1Actions set) { return set.Get(); }
        public void AddCallbacks(INewactionmap1Actions instance)
        {
            if (instance == null || m_Wrapper.m_Newactionmap1ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Newactionmap1ActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(INewactionmap1Actions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(INewactionmap1Actions instance)
        {
            if (m_Wrapper.m_Newactionmap1ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(INewactionmap1Actions instance)
        {
            foreach (var item in m_Wrapper.m_Newactionmap1ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Newactionmap1ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Newactionmap1Actions @Newactionmap1 => new Newactionmap1Actions(this);

    // New action map
    private readonly InputActionMap m_Newactionmap;
    private List<INewactionmapActions> m_NewactionmapActionsCallbackInterfaces = new List<INewactionmapActions>();
    private readonly InputAction m_Newactionmap_Newaction;
    public struct NewactionmapActions
    {
        private @InputController m_Wrapper;
        public NewactionmapActions(@InputController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_Newactionmap_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_Newactionmap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NewactionmapActions set) { return set.Get(); }
        public void AddCallbacks(INewactionmapActions instance)
        {
            if (instance == null || m_Wrapper.m_NewactionmapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_NewactionmapActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(INewactionmapActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(INewactionmapActions instance)
        {
            if (m_Wrapper.m_NewactionmapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(INewactionmapActions instance)
        {
            foreach (var item in m_Wrapper.m_NewactionmapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_NewactionmapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public NewactionmapActions @Newactionmap => new NewactionmapActions(this);
    public interface IWorldActions
    {
        void OnKB_MoveUp(InputAction.CallbackContext context);
        void OnKB_MoveDown(InputAction.CallbackContext context);
        void OnKB_MoveLeft(InputAction.CallbackContext context);
        void OnKB_MoveRight(InputAction.CallbackContext context);
        void OnMouse_Pos(InputAction.CallbackContext context);
        void OnMouseLeft(InputAction.CallbackContext context);
        void OnMouseRight(InputAction.CallbackContext context);
    }
    public interface INewactionmap1Actions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface INewactionmapActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
